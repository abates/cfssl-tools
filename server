#!/usr/bin/env ruby

require "#{File.dirname(__FILE__)}/util.rb"
require "optparse"

options = {
  algo: "ecdsa",
  bits: 256,
}

op = OptionParser.new do |opts|
  opts.banner = "#{$0} [options] <server fqdn> [alt name] [alt name]..."

  opts.on("-t TYPE","Key Type (ecdsa, rsa, etc)") do |v|
    options[:algo] = v
  end

  opts.on("-b BITS","bit length for key") do |v|
    options[:bits] = v
  end
end

begin
  op.parse!
rescue => e
  STDERR.puts "#{e}"
  STDERR.puts "#{op}"
  exit(1) 
end

if ARGV.size < 1
  STDERR.puts "#{op}"
  exit(1)
end

@pwd = Dir.pwd
@common_name = ARGV[0]
@host = @common_name.split(/\./)[0]
if @host == @common_name
  @common_name = "#{@host}.home.omeganetserv.com"
end

@hosts = []
if ARGV.size > 1
  @hosts = ARGV[1..-1].map {|host| "\"#{host}\""}
end
@hosts.unshift("\"#{@common_name}\"")
@hosts.unshift("\"#{@host}\"")

if Dir.exist?(@host)
  STDERR.puts "Dir #{@common_name} already exists. Remove it first"
  exit(2)
end

Dir.mkdir(@host)
Dir.chdir(@host)

output = ""
IO.popen(@cfssl_server, "w+") do |p|
  p.print <<_EOF
{
  "CN": "#{@common_name}",
  "hosts": [ #{@hosts.join(",")} ],
  "key": {
      "algo": "#{options[:algo]}",
      "size": #{options[:bits]}
  },
  "names": [
      {
          "C":  "#{@country}",
          "O":  "#{@organization}"
      }
  ]
}
_EOF
  p.close_write
  p.each do |out|
    output += out
  end
end
values = JSON.parse(output)

[["csr", "#{@host}-cert.csr"], ["key", "#{@host}-key.pem"], ["cert", "#{@host}-cert.pem"]].each do |names|
  File.open(names[1], "w") do |file|
    file.print values[names[0]]
  end
end

Dir.chdir(@pwd)

